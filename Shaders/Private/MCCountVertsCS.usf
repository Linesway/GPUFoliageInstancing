#include "/Engine/Public/Platform.ush"
#include "MarchTables.ush"

int Size;
float isolevel;

Buffer<float> InVoxels;

globallycoherent RWStructuredBuffer<uint> cellMasks; //initialize to zeros, will be filled with the address of owning voxels
globallycoherent RWStructuredBuffer<uint> VertexCount;
globallycoherent RWStructuredBuffer<uint> IndicesCount;

static uint mask[12] =
{
	//                           +-------- Vertex 0 referenced
	//                           | +------ Vertex 3 referenced
	//                           | | +---- Vertex 8 referenced
	//                           | | |         +-- vertexBuffer offset
	//                           | | |         |
	//                           V V V         V
	0x40000000, // Vertex 0 :  . 1 . . . . . . <24b index>
	0x20000000, // Vertex 1 :  . . 1 . . . . . <24b index>
	0x40000000, // Vertex 2 :  . 1 . . . . . . <24b index>
	0x20000000, // Vertex 3 :  . . 1 . . . . . <24b index>
	0x40000000, // Vertex 4 :  . 1 . . . . . . <24b index>
	0x20000000, // Vertex 5 :  . . 1 . . . . . <24b index>
	0x40000000, // Vertex 6 :  . 1 . . . . . . <24b index>
	0x20000000, // Vertex 7 :  . . 1 . . . . . <24b index>
	0x10000000, // Vertex 8 :  . . . 1 . . . . <24b index>
	0x10000000, // Vertex 9 :  . . . 1 . . . . <24b index>
	0x10000000, // Vertex 10:  . . . 1 . . . . <24b index>
	0x10000000, // Vertex 11:  . . . 1 . . . . <24b index>
};

// VertexIDToVoxelAddr() converts a vertexId (0-12) for
// the specified voxel (addr) into the voxel address that
// has the info for that vertex. For instance, vertex 7 info
// will be stored as vertex 3 info in the voxel neighbor
// at +1 in Z (in our voxel grid)
uint VertexIDToVoxelAddr(uint addr, int vertexId)
{
    uint stepx = 0, stepy = 0, stepz = 0;
    switch (vertexId)
    {
        case 0: break;
        case 1: stepy = 1; break;
        case 2: stepx = 1; break;
        case 3: break;
        case 4:            stepz = 1; break;
        case 5: stepy = 1; stepz = 1; break;
        case 6: stepx = 1; stepz = 1; break;
        case 7:            stepz = 1; break;
        case 8: break;
        case 9:             stepy = 1; break;
        case 10: stepx = 1; stepy = 1; break;
        case 11: stepx = 1; break;
    }
    // determine the address of the voxel that owns the vertex on edge e0.
    // Then set the flags on the owner voxel (see mask[] for description)
    // Finally increment our vertex count if the original value didn't have the use bit set (i.e. it didn't but now does, so we need to generate that vertex)
    return addr + stepx + stepy*(Size+1) + stepz*(Size+1)*(Size+1);
}

// Each voxel defines up to 12 potential vertices. Each voxel is only responsible for creating vertices 0, 3, and 8.
// We rely on the neighboring voxels to create the rest of the vertices. Each voxel will keep 3 flags indicating
// whether a vertex (0, 3, or 8) are referenced by a triangle within the current or neighboring vertices. Each voxel
// also stores the index of where these vertices are stored in the vertex buffer. The stored index is the starting
// index with the vertices written in the order: 0, 3, 8.
// Below is a diagram showing the layout of each vertex for a given voxel.
//        +--------5--------+
//       /|                /|
//      9 4              10 |
//     /  |              /  6
//    +----------1------+   |
//    |   |             |   |
//    |   +--------7----|---+
//    0  /              2  /
//    | 8               | 11
//    |/                |/
//    +---------3-------+

//Get the voxel index from a position, size + 3 because voxels are sampled on points and there is another margin for normals
int GetVoxelIndex(int X, int Y, int Z)
{
	return Z * (Size + 4) * (Size + 4) + Y * (Size + 4) + X;
}

[numthreads(8, 8, 8)]
void March(uint3 id : SV_DispatchThreadID)
{
	//iterate up to index Size, so total Size + 1 are calculated.
	if (id.x >= Size + 1 || id.y >= Size + 1 || id.z >= Size + 1) {
		return;
	}

	//voxelid offset by 1 so that it samples within the margin of voxels which are size + 3
	uint3 voxelid = uint3(id.x + 2, id.y + 2, id.z + 2);

	uint addr = id.x + id.y*(Size+1) + id.z*(Size+1)*(Size+1);
	
    //Fill in the 8 corners of the cube (use nvidia's coordinate system)
	float cube[8] = {
		InVoxels[GetVoxelIndex(voxelid.x, voxelid.y, voxelid.z)],
		InVoxels[GetVoxelIndex(voxelid.x, voxelid.y + 1, voxelid.z)],
		InVoxels[GetVoxelIndex(voxelid.x + 1, voxelid.y + 1, voxelid.z)],
		InVoxels[GetVoxelIndex(voxelid.x + 1, voxelid.y, voxelid.z)],
		InVoxels[GetVoxelIndex(voxelid.x, voxelid.y, voxelid.z + 1)],
		InVoxels[GetVoxelIndex(voxelid.x, voxelid.y + 1, voxelid.z + 1)],
		InVoxels[GetVoxelIndex(voxelid.x + 1, voxelid.y + 1, voxelid.z + 1)],
		InVoxels[GetVoxelIndex(voxelid.x + 1, voxelid.y , voxelid.z + 1)]
	};
	
	// From the density values determine the code defining the cube configuration
	uint code = 0;
	for (int i = 7; i >= 0; --i) {
		code = (code << 1) | ((cube[i] >= isolevel) ? 1 : 0);
	}
	
	uint TotalVertexCount = 0;
	int numPolys = casetonumpolys[code];
	
	/*Save the triangles that were found. There can be up to five per cube;
	i * 3 represents the number of vertices */

	for (int i = 0; i < numPolys; i++)
	{
		//vertex indices
		int e0 = TriTable[code][i*3 + 0];
		int e1 = TriTable[code][i*3 + 1];
		int e2 = TriTable[code][i*3 + 2];
			
		// determine the address of the voxel that owns the vertex on edge e0.
		// Then set the flags on the owner voxel (see mask[] for description)
		// Finally increment our vertex count if the original value didn't have the use bit set (i.e. it didn't but now does, so we need to generate that vertex)
		uint e0Addr = VertexIDToVoxelAddr(addr, e0);
		uint origFlag0 = 0;
		InterlockedOr(cellMasks[e0Addr], mask[e0], origFlag0);
		uint f0 = (origFlag0 & mask[e0]); //have to both be the same flag to != 0.
		TotalVertexCount += (f0 == 0) ? 1 : 0;

		// Repeat for vertex e1
		uint e1Addr = VertexIDToVoxelAddr(addr, e1);
		uint origFlag1 = 0;
		InterlockedOr(cellMasks[e1Addr], mask[e1], origFlag1);
		uint f1 = (origFlag1 & mask[e1]);
		TotalVertexCount += (f1 == 0) ? 1 : 0;

		// Repeat for vertex e2
		uint e2Addr = VertexIDToVoxelAddr(addr, e2);
		uint origFlag2 = 0;
		InterlockedOr(cellMasks[e2Addr], mask[e2], origFlag2);
		uint f2 = (origFlag2 & mask[e2]);
		TotalVertexCount += (f2 == 0) ? 1 : 0;
	}
	InterlockedAdd(VertexCount[0], TotalVertexCount);

	//Only triangulate up to Size
	if (id.x >= Size || id.y >= Size || id.z >= Size) {
		return;
	}
	InterlockedAdd(IndicesCount[0], numPolys * 3);
}
