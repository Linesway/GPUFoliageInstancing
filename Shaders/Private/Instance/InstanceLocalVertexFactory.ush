#include "/Engine/Private/VertexFactoryCommon.ush"
#include "/Engine/Private/VirtualTextureCommon.ush"
#include "InstanceCS.ush"

StructuredBuffer<MeshItem> InstanceBuffer;

#define VF_ColorIndexMask_Index 0
#define VF_NumTexcoords_Index 1

struct FVertexFactoryInput
{
	float4	Position	: ATTRIBUTE0;
	
	float3	TangentX	: ATTRIBUTE1;
	float4	TangentZ	: ATTRIBUTE2;
	
	uint InstanceId	: SV_InstanceID;
	uint VertexId : SV_VertexID;
};

struct FPositionOnlyVertexFactoryInput
{
	float4	Position	: ATTRIBUTE0;
	uint InstanceId : SV_InstanceID;
	uint VertexId : SV_VertexID;
};

struct FPositionAndNormalOnlyVertexFactoryInput
{
	float4	Position	: ATTRIBUTE0;
	float4	Normal		: ATTRIBUTE2;
	uint InstanceId : SV_InstanceID;
	uint VertexId : SV_VertexID;
};

struct FVertexFactoryInterpolantsVSToPS
{
	float4 TangentToWorld0 : TEXCOORD10_centroid;
	float4	TangentToWorld2	: TEXCOORD11_centroid;

#if NUM_TEX_COORD_INTERPOLATORS
	float4	TexCoords[(NUM_TEX_COORD_INTERPOLATORS+1)/2]	: TEXCOORD0;
#endif
	
	half4	Color : COLOR0;
};

struct FVertexFactoryIntermediates
{
	float3 Position; //translated world space

	half3x3 TangentToLocal;
	half3x3 TangentToWorld;
	half TangentToWorldSign;
	
	half4 Color;
	FSceneDataIntermediates SceneData;
};

float4x4 GetInstanceTransform(FVertexFactoryIntermediates Intermediates)
{
	return float4x4(
		float4(1,0,0,0),
		float4(0,1,0,0),
		float4(0,0,1,0),
		float4(0,0,0,1)
	);
}

float4x4 GetInstanceTransform(FPositionOnlyVertexFactoryInput Input)
{
	uint InstanceId = Input.InstanceId;
	return float4x4(
		float4(1,0,0,0),
		float4(0,1,0,0),
		float4(0,0,1,0),
		float4(0,0,0,1)
	);
}

float4x4 GetInstanceTransform(FPositionAndNormalOnlyVertexFactoryInput Input)
{
	uint InstanceId = Input.InstanceId;
	return float4x4(
		float4(1,0,0,0),
		float4(0,1,0,0),
		float4(0,0,1,0),
		float4(0,0,0,1)
	);
}

float4 VertexFactoryGetWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	FDFMatrix LocalToWorld = Intermediates.SceneData.InstanceData.LocalToWorld;
	MeshItem Item = InstanceBuffer[Input.InstanceId];
	return TransformLocalToTranslatedWorld(mul(Input.Position + Item.Position, GetInstanceTransform(Intermediates)).xyz, LocalToWorld);
}

float4 VertexFactoryGetRasterizedWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float4 InWorldPosition)
{
	return InWorldPosition;
}

half3x3 CalcTangentToLocal(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, inout float TangentSign)
{
	half3 TangentInputX = Input.TangentX;
	half4 TangentInputZ = Input.TangentZ;
	
	half3 TangentX = TangentBias(TangentInputX);
	half4 TangentZ = TangentBias(TangentInputZ);

	TangentSign = TangentZ.w;
	
	half3 TangentY = cross(TangentZ.xyz, TangentX) * TangentZ.w;
	
	half3x3 Result;
	Result[0] = cross(TangentY, TangentZ.xyz) * TangentZ.w;
	Result[1] = TangentY;
	Result[2] = TangentZ.xyz;

	return Result;
}

half3x3 CalcTangentToWorldNoScale(FVertexFactoryIntermediates Intermediates, half3x3 TangentToLocal)
{
	half3x3 LocalToWorld = DFToFloat3x3(Intermediates.SceneData.InstanceData.LocalToWorld);
	half3 InvScale = Intermediates.SceneData.InstanceData.InvNonUniformScale;
	LocalToWorld[0] *= InvScale.x;
	LocalToWorld[1] *= InvScale.y;
	LocalToWorld[2] *= InvScale.z;
	return mul(TangentToLocal, LocalToWorld); 
}

half3x3 CalcTangentToWorld(FVertexFactoryIntermediates Intermediates, half3x3 TangentToLocal)
{
	half3x3 TangentToWorld = CalcTangentToWorldNoScale(Intermediates, TangentToLocal);
	return TangentToWorld;
}

float4 GetTangentToWorld2(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.TangentToWorld2;
}
float4 GetTangentToWorld0(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.TangentToWorld0;
}

#if NUM_TEX_COORD_INTERPOLATORS
float2 GetUV(FVertexFactoryInterpolantsVSToPS Interpolants, int UVIndex)
{
	float4 UVVector = Interpolants.TexCoords[UVIndex / 2];
	return UVIndex % 2 ? UVVector.zw : UVVector.xy;
}

void SetUV(inout FVertexFactoryInterpolantsVSToPS Interpolants, int UVIndex, float2 InValue)
{
	FLATTEN
	if (UVIndex % 2)
	{
		Interpolants.TexCoords[UVIndex / 2].zw = InValue;
	}
	else
	{
		Interpolants.TexCoords[UVIndex / 2].xy = InValue;
	}
}
#endif

/** Converts from vertex factory specific interpolants to a FMaterialPixelParameters, which is used by material inputs. */
FMaterialPixelParameters GetMaterialPixelParameters(FVertexFactoryInterpolantsVSToPS Interpolants, float4 SvPosition)
{
	FMaterialPixelParameters Result = MakeInitializedMaterialPixelParameters();

#if NUM_TEX_COORD_INTERPOLATORS
	UNROLL
	for( int CoordinateIndex = 0; CoordinateIndex < NUM_TEX_COORD_INTERPOLATORS; CoordinateIndex++ )
	{
		Result.TexCoords[CoordinateIndex] = GetUV(Interpolants, CoordinateIndex);
	}
#endif

	half3 TangentToWorld0 = GetTangentToWorld0(Interpolants).xyz;
	half4 TangentToWorld2 = GetTangentToWorld2(Interpolants);
	Result.UnMirrored = TangentToWorld2.w;
	Result.TangentToWorld = AssembleTangentToWorld( TangentToWorld0, TangentToWorld2 );

	Result.VertexColor = Interpolants.Color;
	Result.TwoSidedSign = 1;
	return Result;
}

/** Converts from vertex factory specific input to a FMaterialVertexParameters, which is used by vertex shader material inputs. */
FMaterialVertexParameters GetMaterialVertexParameters(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 WorldPosition, half3x3 TangentToLocal)
{
	FMaterialVertexParameters Result = MakeInitializedMaterialVertexParameters();

	Result.SceneData = Intermediates.SceneData;
	Result.WorldPosition = WorldPosition;
	Result.VertexColor = Intermediates.Color;
	Result.TangentToWorld = mul(TangentToLocal, GetLocalToWorld3x3());

#if NUM_MATERIAL_TEXCOORDS_VERTEX
	const uint NumFetchTexCoords = SInstanceVF.VertexFetch_Parameters[VF_NumTexcoords_Index];
	UNROLL
	for (uint CoordinateIndex = 0; CoordinateIndex < NUM_MATERIAL_TEXCOORDS_VERTEX; CoordinateIndex++)
	{
		// Clamp coordinates to mesh's maximum as materials can request more than are available
		uint ClampedCoordinateIndex = min(CoordinateIndex, NumFetchTexCoords-1);
		Result.TexCoords[CoordinateIndex] = SInstanceVF.VertexFetch_TexCoordBuffer[NumFetchTexCoords *  Input.VertexId + ClampedCoordinateIndex];
	}
#endif

	
	return Result;
}

FVertexFactoryIntermediates GetVertexFactoryIntermediates(FVertexFactoryInput Input)
{
	FVertexFactoryIntermediates Intermediates = (FVertexFactoryIntermediates)0;
	
	Intermediates.SceneData = VF_GPUSCENE_GET_INTERMEDIATES(Input);

	Intermediates.Position = Input.Position.xyz;
	
	float TangentSign = 1.0;
	Intermediates.TangentToLocal = CalcTangentToLocal(Input, Intermediates, TangentSign);
	Intermediates.TangentToWorld = CalcTangentToWorld(Intermediates, Intermediates.TangentToLocal);
	Intermediates.TangentToWorldSign = TangentSign * Intermediates.SceneData.InstanceData.DeterminantSign;
	
	Intermediates.Color = SInstanceVF.VertexFetch_ColorComponentsBuffer[Input.VertexId & SInstanceVF.VertexFetch_Parameters[VF_ColorIndexMask_Index]] FMANUALFETCH_COLOR_COMPONENT_SWIZZLE;
	
	return Intermediates;
}

FVertexFactoryInterpolantsVSToPS VertexFactoryGetInterpolantsVSToPS(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, FMaterialVertexParameters VertexParameters)
{
	FVertexFactoryInterpolantsVSToPS Interpolants;
	Interpolants = (FVertexFactoryInterpolantsVSToPS)0;

#if NUM_TEX_COORD_INTERPOLATORS
	float2 CustomizedUVs[NUM_TEX_COORD_INTERPOLATORS];
	GetMaterialCustomizedUVs(VertexParameters, CustomizedUVs);
	GetCustomInterpolators(VertexParameters, CustomizedUVs);
	
	UNROLL
	for (int CoordinateIndex = 0; CoordinateIndex < NUM_TEX_COORD_INTERPOLATORS; CoordinateIndex++)
	{
		SetUV(Interpolants, CoordinateIndex, CustomizedUVs[CoordinateIndex]);
	}
#endif

	Interpolants.TangentToWorld0 = float4(Intermediates.TangentToWorld[0], 0);
	Interpolants.TangentToWorld2 = float4(Intermediates.TangentToWorld[2], Intermediates.TangentToWorldSign);
	
	Interpolants.Color = Intermediates.Color;

	return Interpolants;
}

float4 VertexFactoryGetPreviousWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	return VertexFactoryGetWorldPosition(Input, Intermediates);
}

half3x3 VertexFactoryGetTangentToLocal( FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates )
{
	return Intermediates.TangentToLocal;
}

float3 VertexFactoryGetWorldNormal(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	return Intermediates.TangentToWorld[2];
}

float4 VertexFactoryGetWorldPosition(FPositionOnlyVertexFactoryInput Input)
{
	FDFMatrix LocalToWorld = VF_GPUSCENE_GET_INTERMEDIATES(Input).InstanceData.LocalToWorld;
	MeshItem Item = InstanceBuffer[Input.InstanceId];
	return TransformLocalToTranslatedWorld(mul(Input.Position + Item.Position, GetInstanceTransform(Input)).xyz, LocalToWorld);
}

float4 VertexFactoryGetWorldPosition(FPositionAndNormalOnlyVertexFactoryInput Input)
{
	FDFMatrix LocalToWorld = VF_GPUSCENE_GET_INTERMEDIATES(Input).InstanceData.LocalToWorld;
	MeshItem Item = InstanceBuffer[Input.InstanceId];
	return TransformLocalToTranslatedWorld(mul(Input.Position + Item.Position, GetInstanceTransform(Input)).xyz, LocalToWorld);
}

float3 VertexFactoryGetWorldNormal(FPositionAndNormalOnlyVertexFactoryInput Input)
{
	return Input.Normal.xyz;
}

#include "/Engine/Private/VertexFactoryDefaultInterface.ush"